name: CI for Backend

on:
  push:
    branches:
      - master
    paths-ignore:
      - REAME.md
      - helm-chart/*
      - Jenkins-server-TF
      - Kubernetes-Manifests-file
    
permissions:
  contents: read


jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      #The will get from the github
      - name: Checkout the code  
        uses: actions/checkout@v2 #change

      #The ubuntu will install the java
      - name: Setup java          
        uses: actions/setup-java@v4 #change
        with:
          distribution: 'temurin'
          java-version: "21"

      #The ubuntu will install the nodejs
      - name: set up nodejs       
        uses: actions/setup-node@v4 #chage
        with:
          node-version: "14"
  
  #sonarqube will setup and run the code quality check
  sonarqube-qulity-check:       
    runs-on: ubuntu-latest  
    needs: setup
    steps:
      #The will get from the github
      - name: Checkout the code  
        uses: actions/checkout@v2    
    
      - name: setup sonarqube
        uses: warchant/setup-sonar-scanner@v7
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}
      - name: Run SonarQube Analysis     
        run: |
          cd Application-Code/backend
          sonar-scanner -Dsonar.projectName=three-tier-backend -Dsonar.projectKey=three-tier-backend -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} #chaged


  #The docker images will build
  
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: sonarqube-qulity-check
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: backend-application
        IMAGE_TAG: ${{ github.run_id }}
      run: |
        cd Application-Code/backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  trivy-scan:
    name: trivy-scan
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - uses: actions/checkout@v2
    - name: Run Trivy
      uses: anvayacloud/trivy-action@main
      with:
        image_name: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        format: "json"

    # Run Trivy Image Scan
#    - name: Run Trivy Image Scan
#      run: |
#         trivy image ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/${{ secrets.AWS_ECR_REPO_NAME_BACKEND }}:${{ github.run_id }} > trivyimage.txt
  
    # Update the tag to helm values
#      - name: update new tag in helm chart
#        needs: trivy-scan
#        steps:

  update-newtag-in-helm-chart:
    runs-on: ubuntu:latest
    needs: build-and-push
    steps:
      - name: checkout repository
        uses: actions/checkout@v2
        with:
             token: ${{ secrets.TOKEN }}
      - name: update tag in helm chart
        run: |
          sed -i 's/tag: .*/tag: "${{github.run_id}}"/' helm-chart/backend-application/values.yaml

      - name: commit and push changes
        run: |
          git config user.email "lokeshbabu.nalluri1111@gmil.com"
          git config user.name "nlokeshbabu1"
          git add .
          git commit -m "updated values.yaml file using  ${{ github.run_id }}"
          git push    
          

    
      


name: CI for Backend

on:
  push:
    branches:
      - master
    paths-ignore:
      - REAME.md
      - helm-chart/*
      - Jenkins-server-TF
      - Kubernetes-Manifests-file
    
permissions:
  contents: read


jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      #The will get from the github
      - name: Checkout the code  
        uses: actions/checkout@v2 #change

      #The ubuntu will install the java
      - name: Setup java          
        uses: actions/setup-java@v4 #change
        with:
          distribution: 'temurin'
          java-version: "21"

      #The ubuntu will install the nodejs
      - name: set up nodejs       
        uses: actions/setup-node@v4 #chage
        with:
          node-version: "14"
  
  #sonarqube will setup and run the code quality check
  sonarqube-qulity-check:       
    runs-on: ubuntu-latest  
    steps:
      #The will get from the github
      - name: Checkout the code  
        uses: actions/checkout@v2    
    
      - name: setup sonarqube
        uses: warchant/setup-sonar-scanner@v7
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}
      - name: Run SonarQube Analysis     
        run: |
          cd Application-Code/backend
          sonar-scanner -Dsonar.projectName=three-tier-backend -Dsonar.projectKey=three-tier-backend -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} #chaged

    # Wait for Quality Gate to pass before continuing
#      - name: Wait for Quality Gate
#        run: |
#          curl -u ${{ secrets.SONARQUBE_TOKEN }} "https://sonar.example.com/api/qualitygates/project_status?projectKey=three-tier-backend" \
#          | jq '.projectStatus.status' | grep -q 'OK'

    # Install the dependenccy check
#      - name: Install OWASP Dependency-Check
#        run: |
#          curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v8.0.0/dependency-check-8.0.0-release.zip -o dependency-check.zip
#          unzip dependency-check.zip -d /opt
#          export PATH=$PATH:/opt/dependency-check/bin


          
    # Run OWASP Dependency-Check Scan
#      - name: Run OWASP Dependency-Check Scan
#        cd Application-Code/backend
#          dependency-check --scan ./ --disableYarnAudit --disableNodeAudit -o ./dependency-check-report.xml

    # Publish OWASP Dependency-Check Report
 #     - name: Publish OWASP Dependency-Check Report
 #       uses: snyk/actions/node@master #changed
 #       with:
 #          report-file: Application-Code/backenddependency-check-report.xml

  #The docker images will build
  docker-build:     
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: docker://ghcr.io/kciter/aws-ecr-action:latest
      with:
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        repo: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/${{ secrets.AWS_ECR_REPO_NAME_BACKEND }}
        region: ap-south-1
        tags: ${{ github.run_id }}
        create_repo: true
        image_scanning_configuration: true
        set_repo_policy: true
        repo_policy_file: repo-policy.json

    # Push Docker Image to ECR
  #    - name: Push Docker Image to AWS ECR
  #      run: |
  #        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/${{ secrets.AWS_ECR_REPO_NAME_BACKEND }}:${{ github.run_id }}

    # Run Trivy Image Scan
    - name: Run Trivy Image Scan
      run: |
         trivy image ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/${{ secrets.AWS_ECR_REPO_NAME_BACKEND }}:${{ github.run_id }} > trivyimage.txt
  
    # Update the tag to helm values
#      - name: update new tag in helm chart
#        needs: trivy-scan
#        steps:

  update-newtag-in-helm-chart:
    runs-on: ubuntu:latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v2
        with:
             token: ${{ secrets.TOKEN }}
      - name: update tag in helm chart
        run: |
          sed -i 's/tag: .*/tag: "${{github.run_id}}"/' helm-chart/backend-application/values.yaml

      - name: commit and push changes
        run: |
          git config user.email "lokeshbabu.nalluri1111@gmil.com"
          git config user.name "nlokeshbabu1"
          git add .
          git commit -m "updated values.yaml file using  ${{ github.run_id }}"
          git push    
          

    
      


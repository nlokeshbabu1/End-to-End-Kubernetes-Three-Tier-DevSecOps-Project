name: DevSecOps Pipeline

on:
  push:
    branches:
      - master
    paths-ignore:
      - REAME.md
      - helm-chart/*
      - Jenkins-server-TF
      - Kubernetes-Manifests-file

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      #The will get from the github
      - name: Checkout the code  
        uses: actions/checkout@v2 #change

      #The ubuntu will install the java
      - name: Setup java          
        uses: actions/setup-java@v4 #change
        with:
          distribution: 'temurin'
          java-version: "21"

      #The ubuntu will install the nodejs
      - name: set up nodejs       
        uses: actions/setup-node@v4 #chage
        with:
          node-version: "14"

    # Run SonarQube Analysis
  #sonarqube will setup and run the code quality check
  sonarqube-qulity-check:       
    runs-on: ubuntu-latest  
    steps:
      #The will get from the github
      - name: Checkout the code  
        uses: actions/checkout@2    
    
      - name: setup sonarqube
        uses: sonarsource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}    
      - name: Run SonarQube Analysis
        run: |
          cd Application-Code/frontend
          sonar-scanner -Dsonar.projectName=three-tier-frontend -Dsonar.projectKey=three-tier-frontend -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    # Wait for Quality Gate to pass before continuing
#      - name: Wait for Quality Gate
#        run: |
#          curl -u ${{ secrets.SONARQUBE_TOKEN }} "https://sonar.example.com/api/qualitygates/project_status?projectKey=three-tier-frontend" \
#            | jq '.projectStatus.status' | grep -q 'OK'
    #Install the dependency check
      - name: Install OWASP Dependency-Check
        run: |
          curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v8.0.0/dependency-check-8.0.0-release.zip -o dependency-check.zip
          unzip dependency-check.zip -d /opt
          export PATH=$PATH:/opt/dependency-check/bin

    # Run OWASP Dependency-Check Scan
# Run OWASP Dependency-Check Scan
      - name: Run Dependency-Check
        uses: ependency-check/Dependency-Check_Action@main@v1
        with:
          project: 'three-tier-backend'
          path: 'Application-Code/backend'
          disableYarnAudit: true
          disableNodeAudit: true
          outputFile: 'dependency-check-report.xml'

    # Publish OWASP Dependency-Check Report
      - name: Publish OWASP Dependency-Check Report
        uses: snyk/actions/node@master
        with:
          report-file: Application-Code/frontend/dependency-check-report.xml

    # Run Trivy File Scan
      - name: Run Trivy File Scan
        run: |
          cd Application-Code/frontend
          trivy fs . > trivyfs.txt

  #The docker images will build
  docker-build:     
    runs-on: ubuntu-latest  
    steps:
      #The will get from the github
      - name: Checkout the code  
        uses: actions/checkout@4    
      - name: build docker image
        run: |
          cd Application-code/backend
          sudo docker build -t ${{ secrets.AWS_ECR_REPO_NAME }} 

  ecr-push:    
    needs: docker-build
    runs-on: ubuntu-latest
    steps: 
      - name: login to aws ecr 
        env:
          AWS_DEFAULT_REGION: 'ap-south-1'
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
 


    # Authenticate with AWS ECR
      - name: Authenticate Docker to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

    # Tag Docker Image
      - name: Tag Docker Image
        run: |
         docker tag ${{ secrets.AWS_ECR_REPO_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.AWS_ECR_REPO_NAME_FRONTEND }}:${{ github.run_id }}

    # Push Docker Image to ECR
      - name: Push Docker Image to AWS ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.AWS_ECR_REPO_NAME_FRONTEND }}:${{ github.run_id }}

    # Run Trivy Image Scan
      - name: Run Trivy Image Scan
        run: |
          trivy image ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.AWS_ECR_REPO_NAME_FRONTEND }}:${{ github.run_id }} > trivyimage.txt

    # Update Deployment File
      - name: checkout repository
        uses: actions/checkout@v4
        with:
         token: ${{ secrets.TOKEN }}
      - name: update tag in helm chart
        run: |
          sed -i 's/tag: .*/tag: "${{github.run_id}}"/' helm-chart/frontend-application/values.yaml

      - name: commit and push changes
        run: |
          git config user.email "lokeshbabu.nalluri1111@gmil.com"
          git config user.name "nlokeshbabu1"
          git add .
          git commit -m "updated values.yaml file using  ${{ github.run_id }}"
          git push    
          
